/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 public/model/object/dragonite.glb -o src/components/model/Objects/Dragonite.tsx -t -k -T 
Files: public/model/object/dragonite.glb [394.44KB] > dragonite-transformed.glb [108.33KB] (73%)
Author: tirrellclark.75 (https://sketchfab.com/tirrellclark.75)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/dragonite-9fa97ad57eed4ef1b6107c1cee1ace82
Title: Dragonite
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Object_2: THREE.Mesh
    Object_3: THREE.Mesh
  }
  materials: {
    material: THREE.MeshStandardMaterial
    material_1: THREE.MeshStandardMaterial
  }
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function Dragonite(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/dragonite-transformed.glb') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <mesh name="Object_2" geometry={nodes.Object_2.geometry} material={materials.material} rotation={[-Math.PI / 2, 0, 0]} />
      <mesh name="Object_3" geometry={nodes.Object_3.geometry} material={materials.material_1} rotation={[-Math.PI / 2, 0, 0]} />
    </group>
  )
}

useGLTF.preload('/dragonite-transformed.glb')
