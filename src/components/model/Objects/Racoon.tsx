/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 public/model/object/racoon.glb -o src/components/model/Objects/Racoon.tsx -t -k -T 
Files: public/model/object/racoon.glb [340.6KB] > racoon-transformed.glb [101.02KB] (70%)
Author: avatrass (https://sketchfab.com/avatrass)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/low-poly-racoon-run-animation-ee040f4719fa4b449176f860921a7655
Title: Low-poly Racoon Run Animation
*/

import * as THREE from 'three'
import React, { useEffect, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useFrame } from '@react-three/fiber'
import { findTangentVector } from '@/libs/utils'

type GLTFResult = GLTF & {
  nodes: {
    Object_70: THREE.SkinnedMesh
    _rootJoint: THREE.Bone
  }
  materials: {
    Material_LowPoly: THREE.MeshStandardMaterial
  }
}

type ActionName = 'Root|RunAnim'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['skinnedMesh'] | JSX.IntrinsicElements['bone']>>

export function Racoon(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials, animations } = useGLTF('/racoon-transformed.glb') as GLTFResult
  const { actions } = useAnimations<any>(animations, group)
  useEffect(()=>{
    actions?.[Object.keys(actions)[0]]?.play();
  },[actions])

  const racoonRef = useRef();

  // Define the radius of the raccoon's circular path
  const radius = 15;

  // Define the speed of the raccoon's movement
  const speed = 0.011;

  // Define the initial angle
  let angle = 0;

  useFrame(() => {
    // Update the angle based on the speed
    angle += speed;

    // Calculate the new position of the raccoon on the circular path
    const x = Math.sin(angle) * radius;
    if ((Math.sin(angle - speed) ) * (Math.sin(angle) ) < 0) {
      // Rotate the model by 180 degrees when the cycle changes
      group.current.rotateY(Math.PI);
  }

    group.current.position.set(x, props.position[1], props.position[3]);
    // TODO if cos cycle is change then rotate model by 180deg
     // group.current.rotateY(angle)

  });
  return (
    <group ref={group} {...props}  dispose={null}>
      <group name="Sketchfab_Scene">
        <primitive object={nodes._rootJoint} />
        <skinnedMesh name="Object_70" geometry={nodes.Object_70.geometry} material={materials.Material_LowPoly} skeleton={nodes.Object_70.skeleton} rotation={[-Math.PI / 2, 0, 0]} scale={0.723} />
      </group>
    </group>
  )
}

useGLTF.preload('/racoon-transformed.glb')
