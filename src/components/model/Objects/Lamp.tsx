/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 public/model/object/lamp.glb -o src/components/model/Objects/Lamp.tsx -t -k -T 
Files: public/model/object/lamp.glb [2.58MB] > lamp-transformed.glb [256.18KB] (90%)
Author: Patricia.Schad (https://sketchfab.com/Patricia.Schad)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/lamp-cd9f1ad90336417e8d0f48e1d11e2f22
Title: Lamp
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    defaultMaterial: THREE.Mesh;
  };
  materials: {
    ["1001"]: THREE.MeshStandardMaterial;
  };
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

export function Lamp(
  props: JSX.IntrinsicElements["group"] & { lightStatus?: boolean },
) {
  const { nodes, materials } = useGLTF("/lamp-transformed.glb") as GLTFResult;
  const pointLightRef = useRef();

  return (
    <group {...props} dispose={null}>
      <mesh
        name="defaultMaterial"
        geometry={nodes.defaultMaterial.geometry}
        material={materials["1001"]}
      />
     {props?.lightStatus && <pointLight
        intensity={0.75}
        ref={pointLightRef}
        color={"#FFFFCC"}
        position={[-0.1, 1.95, 0.1]}
        decay={-2.2}
        distance={5}
      />}
      {/* {pointLightRef.current && (
        <primitive
          object={new THREE.PointLightHelper(pointLightRef.current, 1)}
        />
      )} */}
    </group>
  );
}

useGLTF.preload("/lamp-transformed.glb");
